import FWCore.ParameterSet.Config as cms
from L1Trigger.CSCTrackFinder.csctfTrackDigis_cfi import*

SimTrackMatching = cms.PSet(
    # common
    cscStations = cms.vstring("CSC_ALL", "CSC_ME11", "CSC_ME1a", "CSC_ME1b", "CSC_ME12", "CSC_ME13",
                              "CSC_ME21", "CSC_ME22", "CSC_ME31", "CSC_ME32", "CSC_ME41", "CSC_ME42"),
    dtStations = cms.vstring("DT_ALL", 
                             "DT_MB01", "DT_MB02", "DT_MB03", "DT_MB04",
                             "DT_MB11p", "DT_MB12p", "DT_MB13p", "DT_MB14p",
                             "DT_MB21p", "DT_MB22p", "DT_MB23p", "DT_MB24p",
                             "DT_MB11n", "DT_MB12n", "DT_MB13n", "DT_MB14n",
                             "DT_MB21n", "DT_MB22n", "DT_MB23n", "DT_MB24n"),
    rpcStations = cms.vstring("RPC_ALL",
                              "RPC_ME12", "RPC_ME13", "RPC_ME22", "RPC_ME23", "RPC_ME31",
                              "RPC_ME32", "RPC_ME33", "RPC_ME41", "RPC_ME42", "RPC_ME43",
                              "RPC_MB01", "RPC_MB02", "RPC_MB03", "RPC_MB04",
                              "RPC_MB11p", "RPC_MB12p", "RPC_MB13p", "RPC_MB14p",
                              "RPC_MB21p", "RPC_MB22p", "RPC_MB23p", "RPC_MB24p",
                              "RPC_MB11n", "RPC_MB12n", "RPC_MB13n", "RPC_MB14n",
                              "RPC_MB21n", "RPC_MB22n", "RPC_MB23n", "RPC_MB24n"),
    gemStations = cms.vstring("GEM_ALL", "GEM_ME11", "GEM_ME21"),
    me0Stations = cms.vstring("ME0"),
    cscStationsToUse = cms.vint32(0,1,2,3,4,5,6,7,8,9,10,11),
    dtStationsToUse = cms.vint32(0,1,2,3,4,5,6,7,8,9,10,11,
                                 12,13,14,15,16,17,18,19,20),
    rpcStationsToUse = cms.vint32(0,1,2,3,4,5,6,7,8,9,10,11,
                                  12,13,14,15,16,17,18,19,20,
                                  21,22,23,24,25,26,27,28,29,30),
    gemStationsToUse = cms.vint32(0,1,2),
    ntupleTrackChamberDelta = cms.bool(True),
    ntupleTrackEff = cms.bool(True),
    overrideminNHitsChamber = cms.bool(False),
    minNHitsChamber = cms.untracked.int32(4),
    verbose = cms.bool(False),
    matchprint = cms.bool(False),
    ## per collection params
    simTrack = cms.PSet(
        verbose = cms.int32(0),
        validInputTags = cms.VInputTag(cms.InputTag("g4SimHits")),
        minPt = cms.double(3),
        maxPt = cms.double(999.),
        minEta = cms.double(0.0),
        maxEta = cms.double(2.4),
        onlyMuon = cms.bool(True),
        requireVertex = cms.bool(True),
        requireGenPart = cms.bool(True),
    ),
    ## GEM
    gemSimHit = cms.PSet(
        verbose = cms.int32(0),
        validInputTags = cms.VInputTag(cms.InputTag("g4SimHits", "MuonGEMHits")),
        run = cms.bool(True),
        simMuOnly = cms.bool(True),
        discardEleHits = cms.bool(True),
    ),
    gemStripDigi = cms.PSet(
        verbose = cms.int32(0),
        validInputTags = cms.VInputTag(cms.InputTag("simMuonGEMDigis")),
        run = cms.bool(True),
        minBX = cms.int32(-1),
        maxBX = cms.int32(1),
        matchDeltaStrip = cms.int32(1),
    ),
    gemPadDigi = cms.PSet(
        verbose = cms.int32(0),
        validInputTags = cms.VInputTag(cms.InputTag("simMuonGEMCSCPadDigis")),
        run = cms.bool(True),
        minBX = cms.int32(-1),
        maxBX = cms.int32(1),
     ),
    gemCoPadDigi = cms.PSet(
        verbose = cms.int32(0),
        validInputTags = cms.VInputTag(cms.InputTag("simMuonGEMCSCPadDigis")),
        run = cms.bool(True),
        minBX = cms.int32(-1),
        maxBX = cms.int32(1),
    ),
    gemRecHit = cms.PSet(
        verbose = cms.int32(0),
        validInputTags = cms.VInputTag(cms.InputTag("gemRecHits")),
        run = cms.bool(True),
        minBX = cms.int32(-1),
        maxBX = cms.int32(1),
        matchDeltaStrip = cms.int32(1),
    ),
    ## ME0
    me0SimHit = cms.PSet(
        verbose = cms.int32(0),
        validInputTags = cms.VInputTag(cms.InputTag("g4SimHits", "MuonME0Hits")),
        run = cms.bool(False),
        simMuOnly = cms.bool(True),
        discardEleHits = cms.bool(True),
    ),
    me0DigiPreReco = cms.PSet(
        verbose = cms.int32(0),
        validInputTags = cms.VInputTag(cms.InputTag("simMuonME0Digis")),
        run = cms.bool(False),
        minBX = cms.int32(-1),
        maxBX = cms.int32(1),
        matchDeltaStrip = cms.int32(1),
    ),
    me0RecHit = cms.PSet(
        verbose = cms.int32(0),
        validInputTags = cms.VInputTag(cms.InputTag("me0RecHits")),
        run = cms.bool(False),
        minBX = cms.int32(-1),
        maxBX = cms.int32(1),
    ),
    me0Segment = cms.PSet(
        verbose = cms.int32(0),
        validInputTags = cms.VInputTag(cms.InputTag("me0Segments")),
        run = cms.bool(False),
        minBX = cms.int32(-1),
        maxBX = cms.int32(1),
    ),
    me0Muon = cms.PSet(
        verbose = cms.int32(0),
        validInputTags = cms.VInputTag(cms.InputTag("me0MuonConverter")),
        run = cms.bool(False),
        minBX = cms.int32(-1),
        maxBX = cms.int32(1),
    ),
    ## RPC
    rpcSimHit = cms.PSet(
        verbose = cms.int32(0),
        validInputTags = cms.VInputTag(cms.InputTag("g4SimHits", "MuonRPCHits")),
        run = cms.bool(False),
        simMuOnly = cms.bool(True),
        discardEleHits = cms.bool(True),
    ),
    rpcStripDigi = cms.PSet(
        verbose = cms.int32(0),
        validInputTags = cms.VInputTag(cms.InputTag("simMuonRPCDigis")),
        run = cms.bool(False),
        minBX = cms.int32(-1),
        maxBX = cms.int32(1),
        matchDeltaStrip = cms.int32(1),
    ),
    rpcRecHit = cms.PSet(
        verbose = cms.int32(0),
        validInputTags = cms.VInputTag(cms.InputTag("rpcRecHits"),
                                       cms.InputTag("hltRpcRecHits")),
        run = cms.bool(False),
        minBX = cms.int32(-1),
        maxBX = cms.int32(1),
        matchDeltaStrip = cms.int32(1),
    ),
    ## CSC
    cscSimHit = cms.PSet(
        verbose = cms.int32(0),
        validInputTags = cms.VInputTag(cms.InputTag("g4SimHits", "MuonCSCHits")),
        run = cms.bool(True),
        simMuOnly = cms.bool(True),
        discardEleHits = cms.bool(True),
        minNHitsChamber = cms.int32(4),
    ),
    cscStripDigi = cms.PSet(
        verbose = cms.int32(0),
        validInputTags = cms.VInputTag(cms.InputTag("simMuonCSCDigis", "MuonCSCComparatorDigi"),
                                       cms.InputTag("hltMuonCSCDigis", "MuonCSCComparatorDigi")),
        run = cms.bool(True),
        minBX = cms.int32(3),
        maxBX = cms.int32(9),
        matchDeltaStrip = cms.int32(2),
        minNHitsChamber = cms.int32(4),
    ),
    cscWireDigi = cms.PSet(
        verbose = cms.int32(0),
        validInputTags = cms.VInputTag(cms.InputTag("simMuonCSCDigis", "MuonCSCWireDigi"),
                                       cms.InputTag("hltMuonCSCDigis", "MuonCSCWireDigi")),
        run = cms.bool(True),
        minBX = cms.int32(3),
        maxBX = cms.int32(8),
        matchDeltaWG = cms.int32(2),
        minNHitsChamber = cms.int32(4),
    ),
    cscCLCT = cms.PSet(
        verbose = cms.int32(0),
        validInputTags = cms.VInputTag(cms.InputTag("simCscTriggerPrimitiveDigis"),
                                       cms.InputTag("hltMuonCSCDigis", "MuonCSCCLCTDigi")),
        run = cms.bool(True),
        minBX = cms.int32(5),
        maxBX = cms.int32(7),
        minNHitsChamber = cms.int32(4),
    ),
    cscALCT = cms.PSet(
        verbose = cms.int32(0),
        validInputTags = cms.VInputTag(cms.InputTag("simCscTriggerPrimitiveDigis"),
                                       cms.InputTag("hltMuonCSCDigis", "MuonCSCALCTDigi")),
        run = cms.bool(True),
        minBX = cms.int32(5),
        maxBX = cms.int32(7),
        minNHitsChamber = cms.int32(4),
    ),
    cscLCT = cms.PSet(
        verbose = cms.int32(0),
        validInputTags = cms.VInputTag(cms.InputTag("simCscTriggerPrimitiveDigis"),
                                       cms.InputTag("hltMuonCSCDigis", "MuonCSCCorrelatedLCTDigi")),
        run = cms.bool(True),
        minBX = cms.int32(5),
        maxBX = cms.int32(7),
        minNHitsChamber = cms.int32(4),
        addGhosts = cms.bool(False),
        matchAlctGemME11 = cms.bool(True),
        matchAlctGemME21 = cms.bool(True),
        matchAlctRpc = cms.bool(False),
        matchClctGemME11 = cms.bool(False),
        matchClctGemME21 = cms.bool(False),
        matchClctRpc = cms.bool(False),
        hsFromSimHitMean = cms.bool(True),
    ),
    cscMPLCT = cms.PSet(
        verbose = cms.int32(0),
        validInputTags = cms.VInputTag(cms.InputTag("simCscTriggerPrimitiveDigis")),
        run = cms.bool(True),
        minBX = cms.int32(5),
        maxBX = cms.int32(7),
        minNHitsChamber = cms.int32(4),
        addGhosts = cms.bool(True),
    ),
    cscRecHit = cms.PSet(
        verbose = cms.int32(0),
        validInputTags = cms.VInputTag(cms.InputTag("csc2DRecHits"),
                                       cms.InputTag("hltCsc2DRecHits")),
        run = cms.bool(True),
        minBX = cms.int32(-1),
        maxBX = cms.int32(1),
    ),
    cscSegment = cms.PSet(
        verbose = cms.int32(0),
        validInputTags = cms.VInputTag(cms.InputTag("cscSegments"),
                                       cms.InputTag("hltCscSegments")),
        run = cms.bool(True),
        minBX = cms.int32(-1),
        maxBX = cms.int32(1),
    ),
    ## DT
    dtSimHit = cms.PSet(
        verbose = cms.int32(0),
        validInputTags = cms.VInputTag(cms.InputTag("g4SimHits", "MuonDTHits")),
        run = cms.bool(True),
        simMuOnly = cms.bool(True),
        discardEleHits = cms.bool(True),
        minNHitsChamber = cms.int32(4),
    ),
    dtDigi = cms.PSet(
        verbose = cms.int32(0),
        validInputTags = cms.VInputTag(cms.InputTag("simMuonDTDigis"),
                                       cms.InputTag("hltMuonDTDigis")),
        run = cms.bool(False),
        ## not sure which BX is the central one
        minBX = cms.int32(-1),
        maxBX = cms.int32(1),
        matchDeltaWire = cms.int32(1),
        minNHitsChamber = cms.int32(4),
    ),
    dtLocalTrigger = cms.PSet(
        verbose = cms.int32(1),
        validInputTags = cms.VInputTag(cms.InputTag("simDtTriggerPrimitiveDigis"),
                                       cms.InputTag("hltMuonDTDigis")),
        run = cms.bool(True),
        minBX = cms.int32(-1),
        maxBX = cms.int32(1),
    ),
    dtRecHit = cms.PSet(
        verbose = cms.int32(0),
        validInputTags = cms.VInputTag(cms.InputTag("dt1DRecHits"),
                                       cms.InputTag("hltDt1DRecHits")),
        run = cms.bool(True),
        minBX = cms.int32(-1),
        maxBX = cms.int32(1),
    ),
    dtRecSegment2D = cms.PSet(
        verbose = cms.int32(0),
        validInputTags = cms.VInputTag(cms.InputTag("dt2DSegments")),
        run = cms.bool(False),
        minBX = cms.int32(-1),
        maxBX = cms.int32(1),
    ),
    dtRecSegment4D = cms.PSet(
        verbose = cms.int32(0),
        validInputTags = cms.VInputTag(cms.InputTag("dt4DSegments"),
                                       cms.InputTag("hltDt4DSegments")),
        run = cms.bool(True),
        minBX = cms.int32(-1),
        maxBX = cms.int32(1),
    ),
    ## TrackFinder tracks
    cscTfTrack = cms.PSet(
        verbose = cms.int32(0),
        run = cms.bool(True),
	input = cms.InputTag("simCsctfTrackDigis"),
        validInputTags = cms.VInputTag(cms.InputTag("simCsctfTrackDigis")),
        minBX = cms.int32(-1),
        maxBX = cms.int32(1),
        deltaR = cms.double(0.5),
    ),
    dtTfTrack = cms.PSet(
        verbose = cms.int32(0),
        validInputTags = cms.VInputTag(cms.InputTag("simDttfDigis", "DTTF")),
        run = cms.bool(False),
        minBX = cms.int32(-1),
        maxBX = cms.int32(1),
        deltaR = cms.double(0.05),        
    ),
    rpcTfTrack = cms.PSet(
        verbose = cms.int32(0),
        validInputTags = cms.VInputTag(cms.InputTag("simMuonRPCDigis")),
        run = cms.bool(False),
        minBX = cms.int32(-1),
        maxBX = cms.int32(1),
        deltaR = cms.double(0.05),        
    ),
    ## TrackFinder candidates
    cscTfCand = cms.PSet(
        verbose = cms.int32(0),
        validInputTags = cms.VInputTag(cms.InputTag("simCsctfDigis", "CSC")),
        run = cms.bool(True),
        minBX = cms.int32(-1),
        maxBX = cms.int32(1),
        deltaR = cms.double(0.05),
    ),
    dtTfCand = cms.PSet(
        verbose = cms.int32(0),
        validInputTags = cms.VInputTag(cms.InputTag("simDttfDigis", "DT")),
        run = cms.bool(True),
        minBX = cms.int32(-1),
        maxBX = cms.int32(1),
        deltaR = cms.double(0.05),
    ),
    rpcfTfCand = cms.PSet(
        verbose = cms.int32(0),
        validInputTags = cms.VInputTag(cms.InputTag("simRpcTriggerDigis", "RPCf")),
        run = cms.bool(False),
        minBX = cms.int32(-1),
        maxBX = cms.int32(1),
        deltaR = cms.double(0.05),
    ),
    rpcbTfCand = cms.PSet(
        verbose = cms.int32(0),
        validInputTags = cms.VInputTag(cms.InputTag("simRpcTriggerDigis", "RPCb")),
        run = cms.bool(False),
        minBX = cms.int32(-1),
        maxBX = cms.int32(1),
        deltaR = cms.double(0.05),
    ),    
    displacedGenMu = cms.PSet(
	validInputTags = cms.VInputTag(cms.InputTag("genParticles")),
	verbose = cms.int32(0),
	run = cms.bool(True),
    ),
    sectorProcessor = csctfTrackDigis.SectorProcessor,
#       SRLUT = cms.PSet(
#			Binary = cms.untracked.bool(False),
#			ReadLUTs = cms.untracked.bool(False),
#			LUTPath = cms.untracked.string("./"),
#			UseMiniLUTs = cms.untracked.bool(True),
#		),
#        PTLUT = cms.PSet(
#    			LowQualityFlag = cms.untracked.uint32(4),
#			ReadPtLUT = cms.bool(False),
#			PtMethod = cms.untracked.uint32(32),
#	       ),
#	CoreLatency = cms.uint32(7),
#	gangedME1a = cms.untracked.bool(True),
#	MinBX = cms.int32(3),
#	MaxBX = cms.int32(9),
#	initializeFromPSet = cms.bool(True),
#    ),
    ## GMT and L1Extra
    gmtRegCandCSC = cms.PSet(
        verbose = cms.int32(0),
        validInputTags = cms.VInputTag(cms.InputTag("simGmtDigis"),
                                       cms.InputTag("hltGtDigis", "CSC")),
        run = cms.bool(True),
        minBX = cms.int32(-1),
        maxBX = cms.int32(1),
        deltaR = cms.double(0.05),
        ),
    gmtRegCandDT = cms.PSet(
        verbose = cms.int32(0),
        validInputTags = cms.VInputTag(cms.InputTag("simGmtDigis"),
                                       cms.InputTag("hltGtDigis", "DT")),
        run = cms.bool(True),
        minBX = cms.int32(-1),
        maxBX = cms.int32(1),
        deltaR = cms.double(0.05),
        ),
    gmtRegCandRPCb = cms.PSet(
        verbose = cms.int32(0),
        validInputTags = cms.VInputTag(cms.InputTag("simGmtDigis"),
                                       cms.InputTag("hltGtDigis", "RPCb")),
        run = cms.bool(True),
        minBX = cms.int32(-1),
        maxBX = cms.int32(1),
        deltaR = cms.double(0.05),
        ),
    gmtRegCandRPCf = cms.PSet(
        verbose = cms.int32(0),
        validInputTags = cms.VInputTag(cms.InputTag("simGmtDigis"),
                                       cms.InputTag("hltGtDigis", "RPCf")),
        run = cms.bool(True),
        minBX = cms.int32(-1),
        maxBX = cms.int32(1),
        deltaR = cms.double(0.05),
        ),
    gmtCand = cms.PSet(
        verbose = cms.int32(0),
        validInputTags = cms.VInputTag(cms.InputTag("simGmtDigis"),
                                       cms.InputTag("hltGtDigis")),
        run = cms.bool(True),
        minBX = cms.int32(-1),
        maxBX = cms.int32(1),
        deltaR = cms.double(0.05),
    ),
    l1ExtraMuonParticle = cms.PSet(
        verbose = cms.int32(0),
        validInputTags = cms.VInputTag(cms.InputTag("hltL1extraParticles")),
        run = cms.bool(True),
        minBX = cms.int32(-1),
        maxBX = cms.int32(1),
        deltaR = cms.double(0.2),
    ),
    ## HLT Tracks
    recoTrackExtra = cms.PSet(
        verbose = cms.int32(0),
        validInputTags = cms.VInputTag(cms.InputTag("hltL2Muons")),
        run = cms.bool(True),
        minBX = cms.int32(-1),
        maxBX = cms.int32(1),
    ),
    recoTrack = cms.PSet(
        verbose = cms.int32(0),
        validInputTags = cms.VInputTag(cms.InputTag("hltL2Muons")),
        run = cms.bool(True),
        minBX = cms.int32(-1),
        maxBX = cms.int32(1),
    ),
    recoChargedCandidate = cms.PSet(
        verbose = cms.int32(0),
        validInputTags = cms.VInputTag(cms.InputTag("hltL2MuonCandidatesNoVtx")), 
        run = cms.bool(True),
        minBX = cms.int32(-1),
        maxBX = cms.int32(1),
    ),
    recoMuon = cms.PSet(
        verbose = cms.int32(0),
        validInputTags = cms.VInputTag(cms.InputTag("hltGlbTrkMuonsNoVtx")), 
        run = cms.bool(True),
        minBX = cms.int32(-1),
        maxBX = cms.int32(1),
    ),
)
